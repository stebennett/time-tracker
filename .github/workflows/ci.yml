name: CI

on:
  push:
    branches: [ main ]
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
          cache: true

      - name: Install dependencies
        run: go mod download

      - name: Run tests
        run: go test -v -race -coverprofile=coverage.txt -covermode=atomic ./...

  build-linux:
    name: Build Linux
    needs: test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goarch: [amd64, arm64]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
          cache: true

      - name: Build
        run: |
          GOARCH=${{ matrix.goarch }} go build -v -o tt ./cmd/tt/main.go

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: tt-linux-${{ matrix.goarch }}
          path: ./tt
          if-no-files-found: error

  build-darwin:
    name: Build Darwin
    needs: test
    runs-on: macos-latest
    strategy:
      matrix:
        goarch: [amd64, arm64]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
          cache: true

      - name: Build
        run: |
          GOARCH=${{ matrix.goarch }} go build -v -o tt ./cmd/tt/main.go

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: tt-darwin-${{ matrix.goarch }}
          path: ./tt
          if-no-files-found: error

  build-windows:
    name: Build Windows
    needs: test
    runs-on: windows-latest
    strategy:
      matrix:
        goarch: [amd64, arm64]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
          cache: true

      - name: Build
        run: |
          $env:GOARCH="${{ matrix.goarch }}"
          go build -v -o tt.exe ./cmd/tt/main.go

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: tt-windows-${{ matrix.goarch }}
          path: ./tt.exe
          if-no-files-found: error

  release:
    name: Release
    needs: [build-linux, build-darwin, build-windows]
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create release archive
        run: |
          cd artifacts
          for os in linux darwin windows; do
            for arch in amd64 arm64; do
              binary="tt-$os-$arch/tt"
              if [ -f "$binary" ]; then
                zip "tt-$os-$arch.zip" "$binary"
              fi
            done
          done

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/tt-*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 